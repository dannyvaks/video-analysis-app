# File Management Service for Video Analysis App\n# Enhanced with API integration and comprehensive file operations\n\nparam(\n    [switch]$CleanOld = $false,\n    [int]$RetentionDays = 7,\n    [switch]$ShowStats = $false,\n    [switch]$List = $false,\n    [switch]$TestAPI = $false,\n    [string]$ApiUrl = \"http://localhost:8000\"\n)\n\n$ErrorActionPreference = \"SilentlyContinue\"\n\n# Get script directory and project directory\n$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path\n$ProjectDir = Split-Path -Parent $ScriptDir\n$UploadsDir = Join-Path $ProjectDir \"backend\\uploads\"\n$ExportsDir = Join-Path $ProjectDir \"backend\\exports\"\n\nfunction Test-APIConnection {\n    try {\n        $response = Invoke-RestMethod -Uri \"$ApiUrl/health\" -Method GET -TimeoutSec 10\n        if ($response.status -eq \"healthy\" -or $response.status -eq \"initializing\") {\n            Write-Host \"‚úÖ API Connection successful\" -ForegroundColor Green\n            Write-Host \"   Status: $($response.status)\" -ForegroundColor Gray\n            return $true\n        }\n    } catch {\n        Write-Host \"‚ùå API Connection failed: $($_.Exception.Message)\" -ForegroundColor Red\n        return $false\n    }\n    return $false\n}\n\nfunction Get-APIStorageStats {\n    try {\n        $stats = Invoke-RestMethod -Uri \"$ApiUrl/files/stats\" -Method GET\n        Write-Host \"üìä API Storage Statistics\" -ForegroundColor Cyan\n        Write-Host \"========================\" -ForegroundColor Cyan\n        Write-Host \"\"\n        \n        Write-Host \"üìÅ Upload Directory:\" -ForegroundColor Yellow\n        Write-Host \"   Files: $($stats.upload_dir.file_count)\" -ForegroundColor Green\n        Write-Host \"   Size: $($stats.upload_dir.size_mb) MB\" -ForegroundColor Green\n        \n        Write-Host \"\"\n        Write-Host \"üìä Export Directory:\" -ForegroundColor Yellow  \n        Write-Host \"   Files: $($stats.export_dir.file_count)\" -ForegroundColor Green\n        Write-Host \"   Size: $($stats.export_dir.size_mb) MB\" -ForegroundColor Green\n        \n        Write-Host \"\"\n        Write-Host \"üíæ Total Storage:\" -ForegroundColor Cyan\n        Write-Host \"   Files: $($stats.total.file_count)\" -ForegroundColor Green\n        Write-Host \"   Size: $($stats.total.size_mb) MB\" -ForegroundColor Green\n        Write-Host \"   Retention: $($stats.retention_days) days\" -ForegroundColor Gray\n        \n        return $stats\n    } catch {\n        Write-Host \"‚ùå Failed to get API stats: $($_.Exception.Message)\" -ForegroundColor Red\n        return $null\n    }\n}\n\nfunction Get-APIFilePairs {\n    try {\n        $pairs = Invoke-RestMethod -Uri \"$ApiUrl/files/pairs\" -Method GET\n        Write-Host \"üîó Available File Pairs for Resume\" -ForegroundColor Cyan\n        Write-Host \"==================================\" -ForegroundColor Cyan\n        Write-Host \"\"\n        \n        if ($pairs.count -eq 0) {\n            Write-Host \"   No file pairs found\" -ForegroundColor Gray\n            return\n        }\n        \n        Write-Host \"Total pairs: $($pairs.count) (Complete: $($pairs.complete_pairs))\" -ForegroundColor Green\n        Write-Host \"\"\n        \n        foreach ($pair in $pairs.pairs) {\n            $status = if ($pair.is_complete) { \"‚úÖ Ready\" } else { \"‚ö†Ô∏è Incomplete\" }\n            $color = if ($pair.is_complete) { \"Green\" } else { \"Yellow\" }\n            \n            Write-Host \"   $status $($pair.video.name)\" -ForegroundColor $color\n            Write-Host \"      üìπ Video: $($pair.video.size_mb) MB, $($pair.video.age_days) days old\" -ForegroundColor Gray\n            \n            if ($pair.excel) {\n                Write-Host \"      üìä Excel: $($pair.excel.name) ($($pair.excel.size_mb) MB)\" -ForegroundColor Gray\n            } else {\n                Write-Host \"      üìä Excel: Not found\" -ForegroundColor Red\n            }\n            Write-Host \"\"\n        }\n        \n        return $pairs\n    } catch {\n        Write-Host \"‚ùå Failed to get file pairs: $($_.Exception.Message)\" -ForegroundColor Red\n        return $null\n    }\n}\n\nfunction Invoke-APICleanup {\n    param([bool]$DryRun = $true)\n    \n    try {\n        $result = Invoke-RestMethod -Uri \"$ApiUrl/files/cleanup?dry_run=$DryRun\" -Method POST\n        \n        $mode = if ($result.dry_run) { \"üß™ DRY RUN\" } else { \"üóëÔ∏è CLEANUP\" }\n        Write-Host \"$mode - File Cleanup Results\" -ForegroundColor Cyan\n        Write-Host \"===============================\" -ForegroundColor Cyan\n        Write-Host \"\"\n        \n        Write-Host \"Files to delete: $($result.files_deleted)\" -ForegroundColor Yellow\n        Write-Host \"Space to free: $($result.size_freed_mb) MB\" -ForegroundColor Yellow\n        Write-Host \"Retention period: $($result.retention_days) days\" -ForegroundColor Gray\n        \n        if ($result.deleted_files.Count -gt 0) {\n            Write-Host \"\"\n            Write-Host \"Files:\" -ForegroundColor Yellow\n            foreach ($file in $result.deleted_files) {\n                Write-Host \"   üìÑ $($file.name) ($($file.size) bytes, $($file.age_days) days old)\" -ForegroundColor Gray\n            }\n        }\n        \n        if ($result.errors.Count -gt 0) {\n            Write-Host \"\"\n            Write-Host \"Errors:\" -ForegroundColor Red\n            foreach ($error in $result.errors) {\n                Write-Host \"   ‚ùå $error\" -ForegroundColor Red\n            }\n        }\n        \n        if ($result.dry_run) {\n            Write-Host \"\"\n            Write-Host \"üí° To actually delete files, run: .\\file-manager.ps1 -CleanOld -RetentionDays $RetentionDays\" -ForegroundColor Yellow\n            Write-Host \"   Or use the API: POST $ApiUrl/files/cleanup?dry_run=false\" -ForegroundColor Gray\n        }\n        \n        return $result\n    } catch {\n        Write-Host \"‚ùå Failed to cleanup files: $($_.Exception.Message)\" -ForegroundColor Red\n        return $null\n    }\n}\n\nfunction Get-FolderSize($Path) {\n    if (Test-Path $Path) {\n        $Size = (Get-ChildItem $Path -Recurse -File | Measure-Object -Property Length -Sum).Sum\n        return [math]::Round($Size / 1MB, 2)\n    }\n    return 0\n}\n\nfunction Get-FileAge($FilePath) {\n    $FileDate = (Get-Item $FilePath).CreationTime\n    return (Get-Date) - $FileDate\n}\n\nfunction Clean-OldFiles($Directory, $Days) {\n    if (-not (Test-Path $Directory)) {\n        Write-Host \"‚ö†Ô∏è Directory not found: $Directory\" -ForegroundColor Yellow\n        return 0\n    }\n    \n    $CutoffDate = (Get-Date).AddDays(-$Days)\n    $OldFiles = Get-ChildItem $Directory -Recurse -File | Where-Object { $_.CreationTime -lt $CutoffDate }\n    \n    $DeletedCount = 0\n    $DeletedSize = 0\n    \n    foreach ($File in $OldFiles) {\n        try {\n            $FileSize = $File.Length\n            Remove-Item $File.FullName -Force\n            $DeletedCount++\n            $DeletedSize += $FileSize\n            Write-Host \"   Deleted: $($File.Name)\" -ForegroundColor Gray\n        } catch {\n            Write-Host \"   Failed to delete: $($File.Name)\" -ForegroundColor Red\n        }\n    }\n    \n    return @{\n        Count = $DeletedCount\n        Size = [math]::Round($DeletedSize / 1MB, 2)\n    }\n}\n\nfunction Show-FileStats {\n    Write-Host \"üìä Local File Storage Statistics\" -ForegroundColor Cyan\n    Write-Host \"=================================\" -ForegroundColor Cyan\n    Write-Host \"\"\n    \n    # Uploads folder\n    if (Test-Path $UploadsDir) {\n        $UploadFiles = Get-ChildItem $UploadsDir -Recurse -File\n        $UploadSize = Get-FolderSize $UploadsDir\n        Write-Host \"üìÅ Uploads Folder:\" -ForegroundColor Yellow\n        Write-Host \"   Location: $UploadsDir\" -ForegroundColor Gray\n        Write-Host \"   Files: $($UploadFiles.Count)\" -ForegroundColor Green\n        Write-Host \"   Size: $UploadSize MB\" -ForegroundColor Green\n        \n        if ($UploadFiles.Count -gt 0) {\n            $OldestFile = $UploadFiles | Sort-Object CreationTime | Select-Object -First 1\n            $NewestFile = $UploadFiles | Sort-Object CreationTime -Descending | Select-Object -First 1\n            Write-Host \"   Oldest: $($OldestFile.Name) ($(Get-FileAge $OldestFile.FullName | ForEach-Object { $_.Days }) days old)\" -ForegroundColor Gray\n            Write-Host \"   Newest: $($NewestFile.Name) ($(Get-FileAge $NewestFile.FullName | ForEach-Object { $_.Days }) days old)\" -ForegroundColor Gray\n        }\n    } else {\n        Write-Host \"üìÅ Uploads Folder: Not found\" -ForegroundColor Red\n    }\n    \n    Write-Host \"\"\n    \n    # Exports folder\n    if (Test-Path $ExportsDir) {\n        $ExportFiles = Get-ChildItem $ExportsDir -Recurse -File\n        $ExportSize = Get-FolderSize $ExportsDir\n        Write-Host \"üìä Exports Folder:\" -ForegroundColor Yellow\n        Write-Host \"   Location: $ExportsDir\" -ForegroundColor Gray\n        Write-Host \"   Files: $($ExportFiles.Count)\" -ForegroundColor Green\n        Write-Host \"   Size: $ExportSize MB\" -ForegroundColor Green\n        \n        if ($ExportFiles.Count -gt 0) {\n            $OldestFile = $ExportFiles | Sort-Object CreationTime | Select-Object -First 1\n            $NewestFile = $ExportFiles | Sort-Object CreationTime -Descending | Select-Object -First 1\n            Write-Host \"   Oldest: $($OldestFile.Name) ($(Get-FileAge $OldestFile.FullName | ForEach-Object { $_.Days }) days old)\" -ForegroundColor Gray\n            Write-Host \"   Newest: $($NewestFile.Name) ($(Get-FileAge $NewestFile.FullName | ForEach-Object { $_.Days }) days old)\" -ForegroundColor Gray\n        }\n    } else {\n        Write-Host \"üìä Exports Folder: Not found\" -ForegroundColor Red\n    }\n    \n    Write-Host \"\"\n    \n    # Total usage\n    $TotalSize = (Get-FolderSize $UploadsDir) + (Get-FolderSize $ExportsDir)\n    Write-Host \"üíæ Total Storage Used: $TotalSize MB\" -ForegroundColor Cyan\n}\n\nfunction List-Files {\n    Write-Host \"üìÅ Local Files Available for Resume\" -ForegroundColor Cyan\n    Write-Host \"===================================\" -ForegroundColor Cyan\n    Write-Host \"\"\n    \n    # Find video-excel pairs\n    $VideoFiles = @()\n    $ExcelFiles = @()\n    \n    if (Test-Path $UploadsDir) {\n        $VideoFiles = Get-ChildItem $UploadsDir -File | Where-Object { $_.Extension -in @('.mp4', '.avi', '.mov', '.mkv') }\n    }\n    \n    if (Test-Path $ExportsDir) {\n        $ExcelFiles = Get-ChildItem $ExportsDir -File | Where-Object { $_.Extension -in @('.xlsx', '.xls') }\n    }\n    \n    Write-Host \"üé¨ Video Files ($($VideoFiles.Count)):\" -ForegroundColor Yellow\n    foreach ($Video in $VideoFiles | Sort-Object CreationTime -Descending) {\n        $Age = Get-FileAge $Video.FullName\n        $Size = [math]::Round($Video.Length / 1MB, 1)\n        Write-Host \"   üìπ $($Video.Name) ($Size MB, $($Age.Days) days old)\" -ForegroundColor Green\n    }\n    \n    Write-Host \"\"\n    Write-Host \"üìä Excel Files ($($ExcelFiles.Count)):\" -ForegroundColor Yellow\n    foreach ($Excel in $ExcelFiles | Sort-Object CreationTime -Descending) {\n        $Age = Get-FileAge $Excel.FullName\n        $Size = [math]::Round($Excel.Length / 1KB, 1)\n        Write-Host \"   üìà $($Excel.Name) ($Size KB, $($Age.Days) days old)\" -ForegroundColor Green\n    }\n    \n    Write-Host \"\"\n    \n    # Find potential pairs\n    Write-Host \"üîó Potential Resume Pairs:\" -ForegroundColor Cyan\n    $Pairs = @()\n    foreach ($Video in $VideoFiles) {\n        $VideoBaseName = [System.IO.Path]::GetFileNameWithoutExtension($Video.Name)\n        $MatchingExcel = $ExcelFiles | Where-Object { $_.Name -like \"*$VideoBaseName*\" -or $VideoBaseName -like \"*$([System.IO.Path]::GetFileNameWithoutExtension($_.Name))*\" }\n        \n        if ($MatchingExcel) {\n            $Pairs += @{\n                Video = $Video.Name\n                Excel = $MatchingExcel.Name\n                VideoPath = $Video.FullName\n                ExcelPath = $MatchingExcel.FullName\n            }\n        }\n    }\n    \n    if ($Pairs.Count -gt 0) {\n        foreach ($Pair in $Pairs) {\n            Write-Host \"   üéØ $($Pair.Video) ‚Üî $($Pair.Excel)\" -ForegroundColor Green\n        }\n    } else {\n        Write-Host \"   No matching pairs found\" -ForegroundColor Gray\n    }\n}\n\n# Main execution\nWrite-Host \"üóÇÔ∏è Video Analysis App - Enhanced File Manager\" -ForegroundColor Cyan\nWrite-Host \"============================================\" -ForegroundColor Cyan\nWrite-Host \"\"\n\n# Ensure directories exist\nif (-not (Test-Path $UploadsDir)) {\n    New-Item -ItemType Directory -Path $UploadsDir -Force | Out-Null\n    Write-Host \"‚úÖ Created uploads directory\" -ForegroundColor Green\n}\n\nif (-not (Test-Path $ExportsDir)) {\n    New-Item -ItemType Directory -Path $ExportsDir -Force | Out-Null\n    Write-Host \"‚úÖ Created exports directory\" -ForegroundColor Green\n}\n\n# Test API connection first\nif ($TestAPI) {\n    Write-Host \"üîç Testing API Connection...\" -ForegroundColor Yellow\n    Test-APIConnection\n    exit\n}\n\n# Check if API is available and use it if possible\n$useAPI = Test-APIConnection\n\nif ($ShowStats) {\n    if ($useAPI) {\n        Get-APIStorageStats\n    } else {\n        Write-Host \"‚ö†Ô∏è API not available, using local file system stats\" -ForegroundColor Yellow\n        Show-FileStats\n    }\n} elseif ($List) {\n    if ($useAPI) {\n        Get-APIFilePairs\n    } else {\n        Write-Host \"‚ö†Ô∏è API not available, using local file system listing\" -ForegroundColor Yellow\n        List-Files\n    }\n} elseif ($CleanOld) {\n    if ($useAPI) {\n        Write-Host \"üß™ Testing cleanup via API (dry run)...\" -ForegroundColor Yellow\n        $dryResult = Invoke-APICleanup -DryRun $true\n        \n        if ($dryResult -and $dryResult.files_deleted -gt 0) {\n            Write-Host \"\"\n            $confirm = Read-Host \"Do you want to proceed with actual deletion? (y/N)\"\n            if ($confirm -eq 'y' -or $confirm -eq 'Y') {\n                Write-Host \"üóëÔ∏è Performing actual cleanup via API...\" -ForegroundColor Red\n                Invoke-APICleanup -DryRun $false\n            } else {\n                Write-Host \"‚ùå Cleanup cancelled\" -ForegroundColor Yellow\n            }\n        }\n    } else {\n        Write-Host \"‚ö†Ô∏è API not available, using local cleanup\" -ForegroundColor Yellow\n        Write-Host \"üßπ Cleaning files older than $RetentionDays days...\" -ForegroundColor Yellow\n        Write-Host \"\"\n        \n        Write-Host \"üìÅ Cleaning uploads folder...\" -ForegroundColor Cyan\n        $UploadCleanup = Clean-OldFiles $UploadsDir $RetentionDays\n        Write-Host \"   Deleted: $($UploadCleanup.Count) files ($($UploadCleanup.Size) MB)\" -ForegroundColor Green\n        \n        Write-Host \"\"\n        Write-Host \"üìä Cleaning exports folder...\" -ForegroundColor Cyan\n        $ExportCleanup = Clean-OldFiles $ExportsDir $RetentionDays\n        Write-Host \"   Deleted: $($ExportCleanup.Count) files ($($ExportCleanup.Size) MB)\" -ForegroundColor Green\n        \n        Write-Host \"\"\n        $TotalDeleted = $UploadCleanup.Count + $ExportCleanup.Count\n        $TotalSize = $UploadCleanup.Size + $ExportCleanup.Size\n        Write-Host \"‚úÖ Cleanup complete: $TotalDeleted files ($TotalSize MB) removed\" -ForegroundColor Green\n    }\n} else {\n    Write-Host \"Enhanced File Manager with API Integration\" -ForegroundColor Yellow\n    Write-Host \"\"\n    Write-Host \"Local Operations:\" -ForegroundColor Yellow\n    Write-Host \"  .\\file-manager.ps1 -ShowStats        # Show storage statistics\" -ForegroundColor Gray\n    Write-Host \"  .\\file-manager.ps1 -List             # List available files for resume\" -ForegroundColor Gray\n    Write-Host \"  .\\file-manager.ps1 -CleanOld         # Clean files older than 7 days\" -ForegroundColor Gray\n    Write-Host \"  .\\file-manager.ps1 -CleanOld -RetentionDays 14  # Custom retention period\" -ForegroundColor Gray\n    Write-Host \"\"\n    Write-Host \"API Operations:\" -ForegroundColor Yellow\n    Write-Host \"  .\\file-manager.ps1 -TestAPI          # Test API connection\" -ForegroundColor Gray\n    Write-Host \"  .\\file-manager.ps1 -ShowStats        # API-powered stats (auto-detected)\" -ForegroundColor Gray\n    Write-Host \"  .\\file-manager.ps1 -List             # API-powered file pairs (auto-detected)\" -ForegroundColor Gray\n    Write-Host \"\"\n    Write-Host \"API Configuration:\" -ForegroundColor Yellow\n    Write-Host \"  Default API URL: $ApiUrl\" -ForegroundColor Gray\n    Write-Host \"  Custom API URL: .\\file-manager.ps1 -ApiUrl 'http://localhost:8080' -ShowStats\" -ForegroundColor Gray\n    Write-Host \"\"\n    \n    # Show current status\n    if ($useAPI) {\n        Write-Host \"‚úÖ API Status: Connected and available\" -ForegroundColor Green\n        Write-Host \"   Using API endpoints for enhanced functionality\" -ForegroundColor Gray\n        Write-Host \"\"\n        Get-APIStorageStats\n    } else {\n        Write-Host \"‚ö†Ô∏è API Status: Not available\" -ForegroundColor Yellow\n        Write-Host \"   Falling back to local file system operations\" -ForegroundColor Gray\n        Write-Host \"   Start the backend server for enhanced features\" -ForegroundColor Gray\n        Write-Host \"\"\n        Show-FileStats\n    }\n}